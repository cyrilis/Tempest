// Generated by CoffeeScript 1.7.1

(function() {
  var API_HOST, AUTH_URL, Application, CHANNELS_URL, PLAYLIST_URL, app_name, fm, version, __;

  plyr.setup();

  window.player = document.querySelectorAll(".player")[0].plyr;

  $(".player-volume").on("input", function(e) {
    var max, min, val;
    min = e.target.min;
    max = e.target.max;
    val = e.target.value;
    return $(e.target).css({
      "backgroundSize": (val - min) * 100 / (max - min) + "% 100%"
    });
  }).trigger('input');

  API_HOST = "http://localhost:9900";

  CHANNELS_URL = API_HOST + "/j/app/radio/channels";

  AUTH_URL = API_HOST + "/j/app/login";

  PLAYLIST_URL = API_HOST + "/j/app/radio/people";

  var USER_API_URL = API_HOST + "/v2/user/";

  app_name = "radio_desktop_win";

  version = 100;

  Application = Application = (function() {
    function Application() {
      this.channel = 0;
      this.user_id = localStorage.getItem("user_id");
      this.token = localStorage.getItem("token");
      this.expire = localStorage.getItem("expire");
      this.email = localStorage.getItem("email");
      this.user_name = localStorage.getItem("user_name");
      this.sid = null;
      this.playlist = [];
      this.song = null;
      player.media.addEventListener('ended', (function(_this) {
        return function() {
          return _this.ended();
        };
      })(this));
      player.media.addEventListener('canplay', (function(_this) {
        return function() {
          console.log("Can Play");
          return _this.hideLoading();
        };
      })(this));
      $(".album img").load(function() {
        return $(this).addClass('show');
      });
      $("img").trigger('load');
      this.initSidebar();
      $("button.button.logout").click((function(_this) {
        return function() {
          return _this.logout();
        };
      })(this));
      $(".icon").bind("webkitAnimationEnd mozAnimationEnd animationEnd", function() {
        return $(this).removeClass("animated");
      });
      $(".icon").click(function() {
        return $(this).addClass("animated");
      });
      // this.registerShortCut();
    }


    Application.prototype.initSidebar = function() {
      window.webkit.messageHandlers.panelDo.postMessage("initSidebar();")
      var self;
      self = this;
      console.log("Fetching channels");
      return $.ajax(CHANNELS_URL).done(function(result) {
        var $channels, channels;
        console.log(result);
        channels = result.channels;
        if (self.user_id && self.token && self.expire) {
          self.getUserInfo().done(function() {
//            $(".channels").removeClass("hide");
            window.webkit.messageHandlers.panelDo.postMessage("$(\".channels\").removeClass(\"hide\");$(\".sidebar .loading\").addClass(\"hide\");")
//            return $(".sidebar .loading").addClass("hide");
          });
        } else {
          window.webkit.messageHandlers.panelDo.postMessage("$(\".channels\").removeClass(\"hide\");$(\".sidebar .loading\").addClass(\"hide\");")
//          $(".channels").removeClass("hide");
//          $(".sidebar .loading").addClass("hide");
        }
        $channels = $(".channels ul");
        channels.forEach(function(channel) {
          return $("<li data-id='" + channel.channel_id + "'>" + channel.name + "</li>").appendTo($channels).click(function(e) {
            var id;
            id = $(e.currentTarget).data("id");
            return self.switchChannel(id);
          });
        });
        $(".channels").find("li[data-id='" + self.channel + "']").addClass("active");
        return $channels.find("[data-id='" + this.channel + "']").addClass("active");
      });
    };

    Application.prototype.getUserInfo = function() {
      var self;
      self = this;
      window.webkit.messageHandlers.panelDo.postMessage("$(\".sidebar .login-form\").addClass(\"hide\");$(\".sidebar .loading\").removeClass(\"hide\");");
//      $(".sidebar .login-form").addClass("hide");
//      $(".sidebar .loading").removeClass("hide");
      this.user_id = localStorage.getItem("user_id");
      console.log("Getting User Data");
      return $.get(USER_API_URL + this.user_id + "?apikey=0776da5f62da51f816648f1e288ef5e8").done(function(result) {
        console.log("Got user info.");
        window.webkit.messageHandlers.panelDo.postMessage("$(\".user-name\").text(\""+result.name.split('"').join('\\"')+"\");$(\".user-desc\").text(\""+(result.signature || result.desc).split('"').join('\\"')+ "\");$(\".avatar\").css(\"background-image\", \"url(\'" + result.large_avatar.split('"').join('\\"') + "\')\");$(\".sidebar .loading\").addClass(\"hide\");$(\".sidebar .user\").removeClass(\"hide\");");
//        $(".user-name").text(result.name);
//        $(".user-desc").text(result.signature || result.desc);
//        $(".avatar").css("background-image", "url(" + result.large_avatar + ")");
//        $(".sidebar .loading").addClass("hide");
//        return $(".sidebar .user").removeClass("hide");
      }).fail(function(err) {
        return console.log(JSON.stringify(err));
      });
    };

    Application.prototype.login = function() {
      var defer, email, password, self;
      email = $("#user-email").val();
      password = $("#user-password").val();
      $(".sidebar .loading").removeClass("hide");
      $(".login-form").addClass("hide");
      self = this;
      defer = new Q.defer();
      if (!email || !password) {
        this.logout();
        defer.reject({
          err: "Both email and password are needed!"
        });
      } else {
        console.log("Logging in...");
        $.post(AUTH_URL, {
          app_name: app_name,
          version: version,
          email: email,
          password: password
        }).done(function(result) {
          console.log(result);
          if (result.r) {
            defer.reject(result.err);
            return self.logout();
          } else {
            self.user_id = result.user_id;
            self.token = result.token;
            self.expire = result.expire;
            self.email = result.email;
            self.user_name = result.user_name;
            localStorage.setItem("user_id", self.user_id);
            localStorage.setItem("token", self.token);
            localStorage.setItem("expire", self.expire);
            localStorage.setItem("email", self.email);
            localStorage.setItem("user_name", self.user_name);
            console.log("Fetching user....");
            self.getUserInfo();
            return defer.resolve(result);
          }
        });
      }
      return defer.promise;
    };

    Application.prototype._login = function(){
        window.webkit.messageHandlers.panelDo.postMessage("login");
    }

    window.setUserInfo = function(result){
        fm.user_id = result.user_id;
        fm.token = result.token;
        fm.expire = result.expire;
        fm.email = result.email;
        fm.user_name = result.user_name;
        self = fm;
        localStorage.setItem("user_id", self.user_id);
        localStorage.setItem("token", self.token);
        localStorage.setItem("expire", self.expire);
        localStorage.setItem("email", self.email);
        localStorage.setItem("user_name", self.user_name);
        console.log("Got user....");
        fm.getUserInfo();
    }

    Application.prototype.logout = function() {
      this.user_id = null;
      this.token = null;
      this.expire = null;
      this.email = null;
      this.user_name = null;
      localStorage.removeItem("user_id");
      localStorage.removeItem("token");
      localStorage.removeItem("expire");
      localStorage.removeItem("email");
      localStorage.removeItem("user_name");

      window.webkit.messageHandlers.panelDo.postMessage("$(\".sidebar .loading\").addClass(\"hide\");$(\".login-form\").removeClass(\"hide\");$(\".user\").addClass(\"hide\");")

      // $(".login-form").removeClass("hide");
      // $(".user").addClass('hide');
      // return $(".sidebar .loading").addClass("hide");
    };



    Application.prototype.fetchSong = function(type, shouldPlay, sid) {
      var channel, data, defer, self;
      if (type == null) {
        type = "n";
      }
      console.log("Fetching");
      self = this;
      defer = new Q.defer();
      if (type !== "b" && type !== "e" && type !== "n" && type !== "p" && type !== "s" && type !== "r" && type !== "s" && type !== "u") {
        defer.reject({
          err: "Type Error!"
        });
      } else {
        channel = this.channel;
        data = {
          app_name: app_name,
          version: version,
          type: type,
          channel: channel
        };
        if (this.user_id && this.token && this.expire) {
          data.user_id = this.user_id;
          data.token = this.token;
          data.expire = this.expire;
        }
        if (type !== "n") {
          data.sid = this.sid;
        }
        if (type === 'e') {
          data.sid = sid;
        }
        $.get(PLAYLIST_URL, data).done(function(result) {
          console.log(result);
          if (type === 'e') {
            return false;
          }
          if (result.r) {
            return defer.reject(result.err);
          } else {
            if (result.song) {
              self.playlist = result.song;
            } else {
              console.log("------------------");
              console.log(JSON.stringify(result));
            }
            if (shouldPlay) {
              self.play(result.song[0]);
            }
            return defer.resolve(result.song);
          }
        });
      }
      return defer.promise;
    };

    Application.prototype.play = function(song) {
      console.log("play");
      if (!song) {
        return player.play();
      } else {
        this.applyHeart(song);
        player.source(song.url);
        this.sid = song.sid;
        this.song = song;
        player.play();
        return this.setAlbum(song);
      }
    };

    Application.prototype.setAlbum = function(song) {
      var pic;
      pic = song.picture.replace("mpic", 'lpic');
      $(".album img").attr('src', pic);
      $(".information .title").text(song.title);
      $(".information .artist").text(song.artist);
      return $(".information .album-title").text(song.albumtitle);
    };

    Application.prototype.applyHeart = function(song) {
      var star;
      star = !!song.like;
      return $(".player").toggleClass("like", star);
    };

    Application.prototype.next = function(type) {
      var playedHalf, self;
      if (type == null) {
        type = "p";
      }
      this.showLoading();
      self = this;
      $(".player-progress-seek").val(0);
      playedHalf = player.media.duration && player.media.currentTime / player.media.duration > 0.5;
      console.log(player.media.duration);
      if (playedHalf) {
        this.sendRecord(this.sid);
      }
      if (this.playlist.length) {
        return this.play(this.playlist.pop());
      } else {
        return this.fetchSong(type).then(function() {
          return self.next();
        }, function(err) {
          return console.log(err);
        });
      }
    };

    Application.prototype.heart = function() {
      return this.fetchSong("r");
    };

    Application.prototype.unheart = function() {
      return this.fetchSong("u");
    };

    Application.prototype.toggleHeart = function() {
      var hasLike, promise, self, sid;
      self = this;
      hasLike = $("#player").hasClass("like");
      promise = hasLike ? this.unheart() : this.heart();
      sid = this.sid;
      return promise.then(function() {
        if (sid === self.sid) {
          return $("#player").toggleClass("like", !hasLike);
        }
      });
    };

    Application.prototype.sendRecord = function(sid) {
      console.log(sid);
      return this.fetchSong('e', null, sid);
    };

    Application.prototype.block = function() {
      player.pause();
      return this.fetchSong("b", true);
    };

    Application.prototype.skip = function() {
      return this.next();
    };

    Application.prototype.ended = function() {
      return this.next();
    };

    Application.prototype.openLink = function() {
      if (this.song) {
          window.webkit.messageHandlers.openLink.postMessage("http://music.douban.com" + this.song.album)
      }
      return false;
    };

    Application.prototype.switchChannel = function(id) {
      this.channel = id;
      this.playlist = [];
      $(".channels").find("li.active").removeClass("active");
      $(".channels").find("li[data-id='" + this.channel + "']").addClass("active");
      player.pause();
      return this.next();
    };

    Application.prototype.showLoading = function() {
      $(".album .loading").addClass("show");
      return $(".album .img").removeClass("show");
    };

    Application.prototype.hideLoading = function() {
      return $(".album .loading").removeClass("show");
    };

    Application.prototype.playOrPause = function() {
      var isPlaying;
      isPlaying = $(".player").hasClass("playing");
      if (isPlaying) {
        return player.pause();
      } else {
        return player.play();
      }
    };

    Application.prototype.registerShortCut = function() {
      var globalShortcut, ret1, ret2, ret3, self;
      self = this;
      //globalShortcut = require('remote').require('global-shortcut');
      ret1 = globalShortcut.register("MediaPlayPause", function() {
        return self.playOrPause();
      });
      ret2 = globalShortcut.register("MediaNextTrack", function() {
        return self.next();
      });
      ret3 = globalShortcut.register("MediaPreviousTrack", function() {
        return self.heart();
      });
      if (ret1 && ret2 && ret3) {
        return console.log("Register Success! ");
      } else {
        console.log("Register Failed.....");
        return console.log(ret1, ret1, ret3);
      }
    };

    return Application;

  })();

  fm = new Application();

  fm.next('n');

  // open album openLink()
  $(".album .info").click(function() {
    console.log("OPen LInk");
    return fm.openLink();
  });

  // Call webkit messageHandler Close
  $(".album .close").click(function() {
     console.log("Close Clicked!!!")
     window.webkit.messageHandlers.closeApplication.postMessage("WTF");
  });

  // Call webkit messageHandler toggle draggable window.
  $(".player-progress, .player-volume").on("mousedown", function(){
     window.webkit.messageHandlers.toggleDrag.postMessage("true");
  })
  $(".player-progress, .player-volume").on("mouseup", function(){
     window.webkit.messageHandlers.toggleDrag.postMessage("false");
  })

  $(".controls .icon.play").click(function() {
    return fm.playOrPause();
  });

  $(".controls .icon.next").click(function() {
    return fm.next();
  });

  $(".controls .icon.heart").click(function() {
    return fm.toggleHeart();
  });

  $(".controls .icon.trash").click(function() {
    return fm.block();
  });
 
  $(".album .menu").click(function(){
      window.webkit.messageHandlers.togglePanel.postMessage("true")
  })

  window.afterGetChanel = function(){
    self = fm
    if (self.user_id && self.token && self.expire) {
    self.getUserInfo().done(function() {
      window.webkit.messageHandlers.panelDo.postMessage("$(\".channels\").removeClass(\"hide\");$(\".sidebar .loading\").addClass(\"hide\");")
      });
    } else {
      window.webkit.messageHandlers.panelDo.postMessage("$(\".channels\").removeClass(\"hide\");$(\".sidebar .loading\").addClass(\"hide\");")
    }
  }
 window.logout = function(){
    fm.logout();
 }
 window.switchChannel = function(id){
    fm.switchChannel(id);
 }
 
 }).call(this);
